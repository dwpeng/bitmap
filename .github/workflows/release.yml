name: Python package build and publish

on:
  release:
    types: [created]

jobs:
  deploy-wheels:
    name: Deploy wheels on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [36, 37, 38, 39, 310]
        manylinux-image: [manylinux2010, manylinux2014, manylinux_2_24]
        arch: [auto]
        include:
          - os: ubuntu-latest
            manylinux-image: manylinux2014
            arch: aarch64
            python-version: 36
          - os: ubuntu-latest
            manylinux-image: manylinux2014
            arch: aarch64
            python-version: 37
          - os: ubuntu-latest
            manylinux-image: manylinux2014
            arch: aarch64
            python-version: 38
          - os: ubuntu-latest
            manylinux-image: manylinux2014
            arch: aarch64
            python-version: 39
          - os: ubuntu-latest
            manylinux-image: manylinux2014
            arch: aarch64
            python-version: 310
        exclude:
          # manyliunx image is not a valid variation on MacOS and Windows
          - os: macos-latest
            manylinux-image: manylinux2010
          - os: windows-latest
            manylinux-image: manylinux2010
          - os: macos-latest
            manylinux-image: manylinux2014
          - os: windows-latest
            manylinux-image: manylinux2014

    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install build
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install build
          python -m pip install --upgrade pip
          if (Test-Path -Path '.\requirements.txt' -PathType Leaf) {pip install -r requirements.txt}

      - name: Build wheels
        run: python -m build --no-isolation --wheel --outdir wheelhouse

      - name: Publish wheels to PyPI Unix
        if: matrix.os != 'windows-latest' 
        continue-on-error: true
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheelhouse/*.whl

      - name: Publish wheels to PyPI Windows
        if: matrix.os == 'windows-latest' 
        continue-on-error: true
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload (Get-ChildItem wheelhouse/*.whl)
